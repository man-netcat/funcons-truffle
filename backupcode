package generated

import com.oracle.truffle.api.frame.VirtualFrame
import language.CBSFuncon
import language.FCTNode
import language.abort
import language.sliceFrom


@CBSFuncon
class SequentialNode(@Children vararg var p0: FCTNode, @Child var p1: FCTNode) : FCTNode() {
    override fun execute(frame: VirtualFrame): FCTNode {
        val new = when {
            p0.isEmpty() -> p1
            p0[0] !is ValuesNode -> {
                val r0 = p0[0].execute(frame)
                SequentialNode(r0, *p0.sliceFrom(1), p1 = p1)
            }

            p0[0] is NullValueNode -> SequentialNode(*p0.sliceFrom(1), p1 = p1)
            else -> abort()
        }
        return replace(new).execute(frame)
    }
}

@CBSFuncon
class IfTrueElseNode(@Child var p0: FCTNode, @Child var p1: FCTNode, @Child var p2: FCTNode) :
    FCTNode() {
    override fun execute(frame: VirtualFrame): FCTNode {
        val new = when {
            p0 !is ValuesNode -> {
                val r0 = p0.execute(frame)
                IfTrueElseNode(r0, p1, p2)
            }

            p0 is TrueNode -> p1
            p0 is FalseNode -> p2
            else -> abort()
        }
        return replace(new).execute(frame)
    }
}

typealias IfElseNode = IfTrueElseNode

package generated

import com.oracle.truffle.api.frame.VirtualFrame
import language.*


@CBSEntity
open class StandardOutNode(vararg p0: FCTNode) : OutputEntity(*p0) {
    init {
        p0.forEach { print(it.value) }
    }
}

@CBSFuncon
class PrintNode(@Children vararg var p0: FCTNode) : FCTNode() {
    override fun execute(frame: VirtualFrame): FCTNode {
        val new = when {
            p0.any { it !is ValuesNode } -> {
                val p = p0.withIndex().first { it.value !is ValuesNode }
                val r0 = p.value.execute(frame)
                PrintNode(*p0.sliceUntil(p.index), r0, *p0.sliceFrom(p.index + 1))
            }

            p0.size >= 0 -> {
                putGlobal("standard-out", StandardOutNode(*p0))
                NullValueNode()
            }

            else -> abort()
        }
        return replace(new).execute(frame)
    }
}